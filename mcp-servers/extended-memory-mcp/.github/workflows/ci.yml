name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,redis]"
        
    - name: Install Redis CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-tools

    - name: Verify Redis connection
      run: |
        redis-cli ping
        echo "Redis is running and accessible"

    - name: Run tests with coverage
      env:
        STORAGE_CONNECTION_STRING: "redis://localhost:6379/15"
      run: |
        python3 -m pytest tests/ -v --cov=src/extended_memory_mcp --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install flake8 black isort mypy

    - name: Run Black formatter check
      run: python3 -m black --check --config pyproject.toml src/extended_memory_mcp/

    - name: Run isort import sorting check
      run: python3 -m isort --check-only --settings-path=pyproject.toml src/extended_memory_mcp/

    - name: Run flake8 linter
      run: python3 -m flake8 src/extended_memory_mcp/ --max-line-length=100 --extend-ignore=E203,W503,E501,F401,E402,E722,F811,F841,F821,F541,C901

    - name: Run mypy type checker (temporarily disabled)
      run: echo "MyPy temporarily disabled due to package name compatibility issues"
      # run: mypy mcp-server/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit pip-audit

    - name: Run Bandit security scanner
      run: |
        python3 -m bandit -r src/extended_memory_mcp/ -f json -o bandit-report.json --exit-zero
        echo "Bandit scan completed successfully"
      # run: bandit -r mcp-server/ -f json -o bandit-report.json || true

    - name: Run pip-audit vulnerability scanner
      run: |
        python3 -m pip_audit --format=json --output=pip-audit-report.json --progress-spinner=off
        echo "pip-audit scan completed successfully"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          pip-audit-report.json
